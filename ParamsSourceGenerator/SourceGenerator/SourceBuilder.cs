using System.Collections.Generic;
using System.Text;

namespace Foxy.Params.SourceGenerator
{
    internal class SourceBuilder
    {
        private readonly StringBuilder _builder = new StringBuilder();
        public string Intend { get; set; } = "    ";
        private int _intendLevel = 0;
        public Stack<string> _scope = new Stack<string>();

        public override string ToString()
        {
            return _builder.ToString();
        }
        public void Namespace(string name)
        {
            AddLineInternal($"namespace {name}");
            OpenBlock(name);
        }

        public void Class(string name)
        {
            AddLineInternal($"partial class {name}");
            OpenBlock(name);
        }

        public void GenericStruct(string name, string genericParam1)
        {
            AddLineInternal($"file struct {name}<{genericParam1}>");
            OpenBlock(name);
        }

        public void Constructor(IEnumerable<string> args)
        {
            AddIntend();
            string className = _scope.Peek();
            _builder.Append($"public {className}(");
            ItemList(", ", args);
            _builder.AppendLine(")");
            OpenBlock(className);
        }

        internal void Method(string name, IEnumerable<string> args, bool isStatic)
        {
            AddIntend();
            _builder.Append("public");
            if (isStatic)
            {
                _builder.Append(" static");
                 
            }
            _builder.Append(" void");
            _builder.Append($" {name}(");
            ItemList(", ", args);
            _builder.AppendLine(")");
            OpenBlock(name);
        }

        public void Attribute(string name)
        {
            AppendLine($"[global::{name}]");
        }

        public void Field(string type, string name)
        {
            AppendLine($"public {type} {name};");
        }

        public void AutoGenerated()
        {
            AddLineInternal("// <auto-generated />");
        }

        public void NullableEnable()
        {
            AddLineInternal("#nullable enable");
        }

        public void CloseBlock()
        {
            DecreaseIntend();
            AddLineInternal("}");
        }

        public void AppendLine()
        {
            _builder.AppendLine();
        }

        public void AppendLine(string text)
        {
            AddIntend();
            _builder.AppendLine(text);
        }

        public void OpenBlock(string scope)
        {
            AddLineInternal("{");
            IncreaseIntend(scope);
        }

        public void IncreaseIntend(string scope) {
            _scope.Push(scope);
            _intendLevel++;
        }
        public void DecreaseIntend() {
            _scope.Pop();
            _intendLevel--;
        }

        private void AddLineInternal(string text)
        {
            AddIntend();
            _builder.AppendLine(text);
        }

        private void AddIntend()
        {
            for (int i = 0; i < _intendLevel; i++)
            {
                _builder.Append(Intend);
            }
        }

        private void ItemList(string separator, IEnumerable<string> args)
        {
            var more = false;
            foreach (var item in args)
            {
                if (more)
                {
                    _builder.Append(separator);
                }
                more = true;
                _builder.Append(item);
            }
        }
    }
}

