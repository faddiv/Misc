using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CodeFixes;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Testing;
using Foxy.Params.SourceGenerator;
using Xunit;
using Xunit.Abstractions;
using SourceGeneratorTests.TestInfrastructure;

namespace SourceGeneratorTests;

using VerifyCS = CSharpSourceGeneratorVerifier<ParamsIncrementalGenerator>;

public class Tests
{

    private const string Attributee = @"// <auto-generated/>

#nullable enable

namespace Foxy.Params {

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Foxy.Params.SourceGenerator"", ""1.0.0.0"")]
    [global::System.AttributeUsage(global::System.AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    sealed class ParamsAttribute : global::System.Attribute
    {
        public int MaxOverrides { get; set; } = 3;
        public bool HasParams { get; set; } = true;
    }
}
";
    private readonly ITestOutputHelper _output;

    public Tests(ITestOutputHelper output)
    {
        _output = output;
    }

    [Fact]
    public async Task Always_Generate_ParamsAttribute()
    {
        string code = @"";

        await VerifyCS.VerifyGeneratorAsync(code, ("ParamsAttribute.g.cs", TestEnvironment.AttributeImpl));
    }

    [Fact]
    public async Task Generate_OverridesFor_SimpleCase_WithDefaultParameters()
    {
        string code = TestEnvironment.GetSource();
        await VerifyCS.VerifyGeneratorAsync(code,
            TestEnvironment.GetOuputs());
    }


    [Fact]
    public async Task Generate_OverridesFor_CountedCase_WithMaxOverrides()
    {
        string code = TestEnvironment.GetSource();
        await VerifyCS.VerifyGeneratorAsync(code,
            TestEnvironment.GetOuputs());
    }

    [Fact]
    public async Task Generate_OverridesFor_MultipleFixedParameters()
    {
        string code = TestEnvironment.GetSource();
        await VerifyCS.VerifyGeneratorAsync(code,
            TestEnvironment.GetOuputs());
    }
}
